@model IEnumerable<Product>
@using DevSkill.Inventory.Domain.Entities
@{
    ViewData["Title"] = "_InventorySummary";
    var newItemId = ViewBag.NewItemId as Guid?;
}
<!-- Search Bar and Value Fields -->
<div class="search-and-values" style="margin-bottom: 20px; padding-right: 15px; text-align: left;">
    <form id="searchForm" onsubmit="return false;">
        <div class="input-group" style="max-width: 300px;">
            <input type="text" class="form-control" id="searchAllItems" placeholder="Search All Items" aria-label="Search All Items" style="padding-left: 10px; border-bottom: none;" oninput="filterItems()">
        </div>
    </form>
    <!-- Value Fields -->
    <div class="value-fields" style="padding: 10px 0;">
        <div class="row" style="margin: 0;">
            <div class="col-md-4 no-padding">
                <strong style="font-size: 20px;">Total Items:</strong> <span id="itemCount">@ViewBag.ItemCount</span>
            </div>
            <div class="col-md-4 no-padding">
                <strong>Total Quantity:</strong> <span id="totalQuantity">@ViewBag.TotalQuantity</span>
            </div>
            <div class="col-md-4 no-padding">
                <strong>Total Value:</strong> <span id="totalValue">@ViewBag.TotalValue, $</span>
            </div>
        </div>
    </div>
</div>

<!-- Inventory Summary Data Table -->
<div class="table-responsive">
    <table class="table table-bordered table-hover table-striped custom-table" style="margin-top: 20px; font-size: 16px;">
        <thead class="thead-light">
            <tr>
                <th onclick="sortTable(0)">Name <span class="sort-icon">&#8597;</span></th>
                <th onclick="sortTable(1)">Quantity <span class="sort-icon">&#8597;</span></th>
                <th onclick="sortTable(2)">Min Level <span class="sort-icon">&#8597;</span></th>
                <th onclick="sortTable(3)">Price <span class="sort-icon">&#8597;</span></th>
                <th onclick="sortTable(4)">Value <span class="sort-icon">&#8597;</span></th>
                <th onclick="sortTable(5)">Tags <span class="sort-icon">&#8597;</span></th>
            </tr>
        </thead>
        <tbody id="products">
            @if (Model != null && Model.Any())
            {
                foreach (var item in Model)
                {
                    <tr class="card-box">
                        <td>
                            <a asp-area="Admin" asp-controller="Product" asp-action="Update" asp-route-id="@item.Id" style="display: flex;">
                                <img src="@item.Image" alt="@item.Title" style="width: 50px; height: 50px; margin-right: 10px; border-radius: 8px;" />
                                <span class="item-title" style="color: black;">@item.Title</span>
                            </a>
                        </td>
                        @* <td class="item-quantity">@item.Quantity</td> *@
                        <td class="item-quantity">
                            @item.Quantity
                            @if (item.Quantity < item.MinLevel)
                            {
                                <span class="badge bg-danger" style="margin: 5px; padding: 5px;">LOW STOCK</span>
                            }
                        </td>
                        <td>@item.MinLevel</td>
                        <td class="item-price">@item.Price, $</td>
                        <td class="item-value">@item.TotalValue, $</td>
                        <td>@item.Tags</td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="6" class="text-center">No items available right now.</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<style>
    .custom-table tbody tr td a:hover img {
        transform: scale(1.1);
        transition: transform 0.4s ease-in-out;
    }
    #td {
        align-items: center;
    }

    .custom-table thead th {
        cursor: pointer;
        user-select: none;
    }
    .sort-icon {
        margin-left: 5px;
        transition: transform 0.2s; 
    }
</style>

<script>
    function filterItems() {
        var searchTerm = document.getElementById("searchAllItems").value.toLowerCase();
        var rows = document.querySelectorAll("#products tr");
        var visibleItemCount = 0;
        var totalQuantity = 0;
        var totalValue = 0;

        rows.forEach(row => {
            var itemTitle = row.querySelector(".item-title").textContent.toLowerCase(); 
            var itemQuantity = parseInt(row.querySelector(".item-quantity").textContent) || 0; 
            var itemPrice = parseFloat(row.querySelector(".item-price").textContent.replace(',', '').trim()) || 0; 
            var itemValue = parseFloat(row.querySelector(".item-value").textContent.replace(',', '').trim()) || 0;

            // Check if the title contains the search term
            if (itemTitle.includes(searchTerm)) {
                row.style.display = "";
                visibleItemCount++; 
                totalQuantity += itemQuantity; 
                totalValue += itemValue;
            } else {
                row.style.display = "none"; 
            }
        });

        document.getElementById("itemCount").textContent = visibleItemCount;
        document.getElementById("totalQuantity").textContent = totalQuantity;
        document.getElementById("totalValue").textContent = totalValue.toFixed(2) + " $"; 
    }

    let sortDirection = true; 

    function sortTable(columnIndex) {
        const table = document.getElementById("products");
        const rows = Array.from(table.rows).slice(0); 
        const isNumericColumn = (columnIndex === 1 || columnIndex === 3 || columnIndex === 4); 

        // Sort the rows based on the column index
        rows.sort((a, b) => {
            const cellA = a.cells[columnIndex].textContent.trim();
            const cellB = b.cells[columnIndex].textContent.trim();

            let comparison = 0;

            if (isNumericColumn) {
                // Convert to number for numeric comparison
                const valueA = parseFloat(cellA.replace(',', '').replace('$', ''));
                const valueB = parseFloat(cellB.replace(',', '').replace('$', ''));
                comparison = valueA - valueB;
            } else {
                // Compare as strings for non-numeric columns
                comparison = cellA.localeCompare(cellB);
            }

            return sortDirection ? comparison : -comparison; // Ascending or descending based on sortDirection
        });

        // Clear the table body and append the sorted rows
        while (table.rows.length > 1) {
            table.deleteRow(1);
        }
        rows.forEach(row => table.appendChild(row));

        // Toggle sort direction for next click
        sortDirection = !sortDirection;
    }
</script>
