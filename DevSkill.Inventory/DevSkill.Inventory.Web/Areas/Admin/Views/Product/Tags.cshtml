@model IEnumerable<Product>
@using DevSkill.Inventory.Domain.Entities
@{
    ViewData["Title"] = "Items";
    var newItemId = ViewBag.NewItemId as Guid?;
}

<div class="content-wrapper">
    <div class="row">
        <!-- Sidebar -->
        <aside class="col-md-3" style="position: sticky; top: 0; height: 100vh;">
            <div class="card" style="height: 100vh;">
                <div class="card-body" style="overflow-y: auto;">
                    <form class="search-container">
                        <div class="form-group">
                            <div class="input-group">
                                <div class="input-group-append">
                                    <span class="input-group-text" id="search-icon">
                                        <i class="fas fa-search"></i>
                                    </span>
                                </div>
                                <input type="text" class="form-control" id="folderSearch" placeholder="Search tags" aria-label="Search tags">
                                <div class="input-group-append" id="clear-button" style="cursor: pointer; display: none;">
                                    <span class="input-group-text">
                                        <i class="fas fa-times"></i>
                                    </span>
                                </div>
                            </div>
                            <div class="header-border mb-4"></div>

                            <!-- Tags will be dynamically populated here -->
                            <div id="searchTagsContainer" class="form-group tag-container">
                                @if (Model != null && Model.Any())
                                {
                                    var allTags = Model
                                    .Where(p => p.Tags != null)
                                    .SelectMany(p => p.Tags.Split(','))
                                    .Distinct()
                                    .OrderBy(t => t);

                                    foreach (var tag in allTags)
                                    {
                                        <div class="tag-item card-tag">
                                            <i class="fas fa-tag tag-icon"></i>
                                            <span class="tag-text" data-tag="@tag">@tag</span>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <p>No tags available now.</p>
                                }
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </aside>

        <!-- Main Content -->
        <div class="col-md-9">
            <div class="fixed-header">
                <div class="d-flex justify-content-between align-items-center mb-4" style="margin-top: 30px;">
                    <h1 class="items-title">Tags</h1>
                </div>
                <div class="header-border mb-4"></div>
                <partial name="_ResponsePartial"></partial>
            </div>

            <!-- Div for Selected Items -->
            <div id="selectedItemsDiv" class="selected-items" style="display: none; margin-bottom: 10px;">
                <div class="d-flex align-items-center">
                    <span id="selectedItemsText">0 items selected</span>
                    <div class="dropdown" style="padding-left: 3px;">
                        <button class="btn dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></button>
                        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton" style="padding: 2px;">
                            <a class="dropdown-item" href="#" id="selectAllItems">All</a>
                            <a class="dropdown-item" href="#" id="clearSelection">Clear Selection</a>
                        </div>
                    </div>
                    <div class="ml-auto">
                        <button type="button" class="btn btn-danger btn-sm show-bs-modal" data-id='${data}' value='${data}'>
                            <i class="fas fa-trash"></i> Delete
                        </button>
                        <partial name="_ModalPartial"></partial>
                    </div>
                </div>
            </div>

            <!-- Search Bar and Value Fields -->
            <div class="search-and-values" style="margin-bottom: 20px; padding-right: 15px; text-align: left;">
                <form id="searchForm">
                    <div class="input-group" style="max-width: 300px;">
                        <input type="text" class="form-control" id="searchAllItems" placeholder="Search All Items" aria-label="Search All Items" style="padding-left: 10px; border-bottom: none;">
                    </div>
                </form>
                <!-- Closer Value Fields -->
                <div class="value-fields" style="padding: 10px 0;">
                    <div class="row" style="margin: 0;">
                        <div class="col-md-3 no-padding">
                            <strong>Folders:</strong> <span id="folderCount">0</span>
                        </div>
                        <div class="col-md-3 no-padding">
                            <strong>Items:</strong> <span id="itemCount">@ViewBag.ItemCount</span>
                        </div>
                        <div class="col-md-3 no-padding">
                            <strong>Total Quantity:</strong> <span id="totalQuantity">@ViewBag.TotalQuantity</span>
                        </div>
                        <div class="col-md-3 no-padding">
                            <strong>Total Value:</strong> <span id="totalValue">@ViewBag.TotalValue, $</span>
                        </div>
                    </div>
                </div>
            </div>
            <div id="products" class="row" style="margin: 0;">
                @if (Model != null && Model.Any())
                {
                    @foreach (var item in Model)
                    {
                        <!-- Begin merged _ItemBoxPartial content -->
                        <div class="col-md-4 d-flex justify-content-center">
                            <a asp-area="Admin" asp-controller="Product" asp-action="Update" asp-route-id="@item.Id" class="card item-box @(ViewBag.IsNewItem == true ? "new-item-highlight" : "")">
                                <span class="item-serial"></span>
                                <img src="@item.Image" alt="@item.Title" class="card-img-top" />
                                <h5 class="card-title">@item.Title</h5>
                                <div class="card-body">
                                    <!-- Second Line: Quantity and Price -->
                                    <div class="item-info">
                                        <span class="item-quantity">Quantity: @item.Quantity</span>
                                        <span class="divider">|</span>
                                        <span class="item-price">Price: @item.Price, $</span>
                                    </div>

                                    <!-- Third Line: Tag Icon and Tag -->
                                    <div class="item-tag">
                                        <i class="fas fa-tag card-tag"></i> @item.Tags
                                        <span class="divider">|</span>
                                        <span class="item-price" id="totalValue">Total: @item.TotalValue,$</span>
                                    </div>
                                </div>
                                <input type="checkbox" class="checkbox-delete" id="deleteCheckbox" value="@item.Id" />
                            </a>
                        </div>
                    }
                }
                else
                {
                    <p>No items available now.</p>
                }
            </div>
        </div>
    </div>
</div>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        var folderSearch = document.getElementById("folderSearch");
        var tagsContainer = document.getElementById("searchTagsContainer");

        var items = document.querySelectorAll('.item-box');
        var itemCountField = document.getElementById('itemCount');
        var totalQuantityField = document.getElementById('totalQuantity');
        var totalValueField = document.getElementById('totalValue');

        // Function to filter items by tag
        function filterItemsByTag(tag) {
            let visibleItemCount = 0;
            let totalQuantity = 0;
            let totalValue = 0;

            items.forEach(function (item) {
                var itemTags = item.querySelector('.item-tag').textContent.toLowerCase();

                if (itemTags.includes(tag.toLowerCase())) {
                    item.style.display = 'flex';
                    item.style.margin = '0px 45px 20px 40px';
                    visibleItemCount++;

                    var itemQuantity = parseInt(item.querySelector('.item-quantity').textContent.replace('Quantity: ', '')) || 0;
                    var itemPrice = parseFloat(item.querySelector('.item-price').textContent.replace('Price: ', '').replace('$', '')) || 0;
                    var itemTotalValue = itemQuantity * itemPrice;

                    totalQuantity += itemQuantity;
                    totalValue += itemTotalValue;
                } else {
                    item.style.display = 'none';
                }
            });

            // After filtering, reflow the visible items
            var filteredItems = Array.from(items).filter(item => item.style.display === 'flex');
            var productsContainer = document.getElementById('products');
            productsContainer.innerHTML = '';
            filteredItems.forEach(item => productsContainer.appendChild(item));

            // Update countable fields
            itemCountField.textContent = visibleItemCount;
            totalQuantityField.textContent = totalQuantity;
            totalValueField.textContent = totalValue.toFixed(2) + ' $';
        }

        // Add click event listeners to the tags
        var tagElements = document.querySelectorAll('.tag-item');
        tagElements.forEach(function (tagElement) {
            tagElement.addEventListener('click', function () {
                var selectedTag = this.querySelector('.tag-text').textContent;

                // Remove 'active' class from all tag elements first
                tagElements.forEach(function (el) {
                    el.classList.remove('active-tag');
                    el.querySelector('.tag-icon').style.color = '';
                });

                // Add 'active' class to the clicked tag element
                this.classList.add('active-tag');
                this.querySelector('.tag-icon').style.color = 'red'; 

                // Call the filtering function with the selected tag
                filterItemsByTag(selectedTag);
            });
        });
    }); 
</script>
<style>
    /* Tag Container */
    .tag-container {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }
    .tag-item {
        display: flex;
        align-items: center;
        padding: 8px;
        background-color: #f9f9f9;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease, transform 0.3s ease;
    }
    .tag-icon {
        margin-right: 8px;
        color: #888888;
        font-size: 1.2em;
    }
    .tag-text {
        font-size: 16px;
        color: #333;
        transition: color 0.3s ease;
        font-size: 1.2em;
    }
    .tag-item:hover {
        background-color: #f1f1f1;
        color: #0056b3;
    }

    /* Active tag */
    .active-tag {
        background-color: #f0f0f0;
        border: 1px solid red;
        color: red;
    }
    .active-tag .tag-icon {
        color: red;
    }
</style>